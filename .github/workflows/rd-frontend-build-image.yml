name: "[docker-image-builds] Remote Dekstop Frontend"

env:
  # Ubuntu LTS release name to use for downloading cloud images
  # from Canonical's Partner Images server, among other things.
  UBUNTU_LTS_CODENAME: focal
  
  # Gclient and GUACD version stuff
  GCLIENT_RELEASE: 0.1.1
  GUACD_VERSION: 1.1.0

  # Registry namespaces, to avoid only-lowercase-supported errors
  GHCR_NAMESPACE: ajhalili2006
  RHQCR_NAMESPACE: ajhalili2006

  # Service account stuff for Quay.io
  RHQCR_BOT_ACCOUNT: ajhalili2006+gildedguy
  RHQCR_BOT_PASSWORD: ${{ secrets.RHQCR_SERVICE_ACCOUNT_API_KEY }}

  # GHCR
  GHCR_PAT: ${{ secrets.LTT_STORE_DOT_COM }}
  # may not work if forked in an org, use an bot account instead
  GHCR_USERNAME: ${{ github.repository_owner }}

  # Other stuff for Docker builds
  image_name: remote-desktop-frontend
  context: src/rd-frontend

  RELEASES_GPG_KEY: ${{ secrets.CURSED_CONTENT_OVER_HERE }}
  RELEASES_GPG_PASSPHARSE: ${{ secrets.COOL_AND_NORMAL }}

on:
  push:
    branches: [ main ]
    paths:
      - "src/rd-frontend/Dockerfile"
      - "src/rd-frontend/root/**"
      - "src/rd-frontend/.trigger-build"

jobs:
  rd-frontend-nightly:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login with GHCR
        uses: docker/login-action@v1
        with:
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_PAT }}
          registry: ghcr.io
      - name: Login with RHQCR
        uses: docker/login-action@v1
        with:
          username: ${{ env.RHQCR_BOT_ACCOUNT }}
          password: ${{ env.RHQCR_BOT_PASSWORD }}
          registry: quay.io
      - name: Generate matadata
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: |
            ghcr.io/${{ env.GHCR_NAMESPACE }}/${{ env.image_name }}
            quay.io/${{ env.RHQCR_NAMESPACE }}/${{ env.image_name }}
          tags: |
            type=sha,format=long
            nightly-${{ env.UBUNTU_LTS_CODENAME }}
            nightly
          flavor: |
            latest=false   
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build da image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.context }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GCLIENT_RELEASE=${{ env.GCLIENT_RELEASE }}
            GUACD_VERSION=${{ env.GUACD_VERSION }}
  rd-frontend-release:
     runs-on: ubuntu-latest
     # For forks, here's the configuration:
     #  - Wait time: 30 minute
     #  - Approvers: usually you
     environment: ship-changes-rdfrontend
     needs: [ rd-frontend-nightly ]
     permissions:
       # This will alwyas set to read, no need for this.
       #metadata: read
       contents: write
     steps:
      - name: Setup Git
        run: curl -fsSL https://github.com/code-server-boilerplates/charts/raw/main/scripts/setup-ci | bash
        env:
          GH_ACTIONS_MODE: 1
      - name: Login with GHCR
        uses: docker/login-action@v1
        with:
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_PAT }}
          registry: ghcr.io
      - name: Login with RHQCR
        uses: docker/login-action@v1
        with:
          username: ${{ env.RHQCR_BOT_ACCOUNT }}
          password: ${{ env.RHQCR_BOT_PASSWORD }}
          registry: quay.io
      - name: Generate matadata
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: |
            ghcr.io/${{ env.GHCR_NAMESPACE }}/${{ env.image_name }}
            quay.io/${{ env.RHQCR_NAMESPACE }}/${{ env.image_name }}
          tags: |
            ${{ env.UBUNTU_LTS_CODENAME }}
          flavor: |
           latest=true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build da image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.context }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GCLIENT_RELEASE=${{ env.GCLIENT_RELEASE }}
            GUACD_VERSION=${{ env.GUACD_VERSION }}
      - name: Trigger CI for the rd-backend
        run: |
          date | base64 > src/rd-frontend/.trigger-build
          git add .
          git commit -m "[ci] trigger docker build for rd-frontend" --signoff
          git push
